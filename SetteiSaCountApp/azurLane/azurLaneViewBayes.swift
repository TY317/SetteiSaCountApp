//
//  azurLaneViewBayes.swift
//  SetteiSaCountApp
//
//  Created by Ê®™Áî∞Âæπ on 2025/08/24.
//

import SwiftUI

struct azurLaneViewBayes: View {
    @ObservedObject var azurLane: AzurLane
    
    // Ê©üÁ®Æ„Åî„Å®„Å´Ë¶ãÁõ¥„Åó
    let settingList: [Int] = [1,2,3,4,5,6]   // „Åù„ÅÆÊ©üÁ®Æ„ÅÆË®≠ÂÆöÊÆµÈöé
    let payoutList: [Double] = [97.9, 98.6, 100.7, 105.3, 110.6, 114.9]
    @State var jakuRareEnable: Bool = true
    @State var firstHitEnable: Bool = true
    @State var screenEnable: Bool = true
    @State var startModeEnable: Bool = true
    @State var akashiEnable: Bool = true
    @State var kagaEnable: Bool = true
    
    // ÂÖ®Ê©üÁ®ÆÂÖ±ÈÄö
    @EnvironmentObject var common: commonVar
    @ObservedObject var bayes: Bayes   // BayesClass„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ
    @ObservedObject var viewModel: InterstitialViewModel   // Â∫ÉÂëä„ÇØ„É©„Çπ„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ
    @State var guessCustom1: [Int] = []   // „Ç´„Çπ„Çø„É†ÈÖçÂàÜ1Áî®„ÅÆÂÖ•„ÇåÁâ©
    @State var guessCustom2: [Int] = []   // „Ç´„Çπ„Çø„É†ÈÖçÂàÜ2Áî®„ÅÆÂÖ•„ÇåÁâ©
    @State var guessCustom3: [Int] = []   // „Ç´„Çπ„Çø„É†ÈÖçÂàÜ3Áî®„ÅÆÂÖ•„ÇåÁâ©
    @State var resultGuess: [Double] = []   // Ë®àÁÆóÁµêÊûú„ÅÆÂÖ•„ÇåÁâ©
    @State var isShowResult: Bool = false   // ÁµêÊûú„Ç∑„Éº„Éà„ÅÆË°®Á§∫„Éà„É™„Ç¨„Éº
    @State var over2Check: Bool = false   // 2‰ª•‰∏äÊøÉÂéö
    @State var over3Check: Bool = false   // 3‰ª•‰∏äÊøÉÂéö
    @State var over4Check: Bool = false   // 4‰ª•‰∏äÊøÉÂéö
    @State var over5Check: Bool = false   // 5‰ª•‰∏äÊøÉÂéö
    @State var over6Check: Bool = false   // 6‰ª•‰∏äÊøÉÂéö
    @State var selectedBeforeGuessPattern: String = "„Éá„Éï„Ç©„É´„Éà"
    
    var body: some View {
        List {
            // //// STEP1
            bayesSubStep1Section(
                bayes: bayes,
                settingList: self.settingList,
                guessCustom1: self.$guessCustom1,
                guessCustom2: self.$guessCustom2,
                guessCustom3: self.$guessCustom3,
                selectedBeforeGuessPattern: self.$selectedBeforeGuessPattern,
            )
            
            // //// STEP2
            bayesSubStep2Section {
                // Âº±„É¨„Ç¢ÂΩπÁ¢∫Áéá
                unitToggleWithQuestion(enable: self.$jakuRareEnable, title: "Â∞èÂΩπÁ¢∫Áéá") {
                    unitExView5body2image(
                        title: "Â∞èÂΩπÁ¢∫Áéá",
                        textBody1: "„ÉªÂÖ±ÈÄöüîî„ÄÅÂº±üçí„ÄÅÂº±üçâ„ÅÆÂá∫ÁèæÁ¢∫Áéá„ÇíË®àÁÆóË¶ÅÁ¥†„Å´Âä†„Åà„Åæ„Åô",
                    )
                }
                // ÂàùÂΩì„ÇäÁ¢∫Áéá
                unitToggleWithQuestion(enable: self.$firstHitEnable, title: "ÂàùÂΩì„ÇäÁ¢∫Áéá") {
                    unitExView5body2image(
                        title: "ÂàùÂΩì„ÇäÁ¢∫Áéá",
                        textBody1: "„Éª„Éú„Éº„Éä„Çπ„ÄÅATÂàùÂΩì„ÇäÁ¢∫Áéá„ÇíË®àÁÆóË¶ÅÁ¥†„Å´Âä†„Åà„Åæ„Åô",
                    )
                }
                // Âä†Ë≥Ä„Éê„Éà„É´
                unitToggleWithQuestion(enable: self.$kagaEnable, title: "Âä†Ë≥Ä„Éê„Éà„É´") {
                    unitExView5body2image(
                        title: "Âä†Ë≥Ä„Éê„Éà„É´",
                        textBody1: "„Ç∑„Éä„É™„Ç™ÊåØ„ÇäÂàÜ„Åë„ÇíË®àÁÆóË¶ÅÁ¥†„Å´Âä†„Åà„Åæ„Åô"
                    )
                }
                // ÊòéÁü≥„ÉÅ„É£„É¨„É≥„Ç∏
                unitToggleWithQuestion(enable: self.$akashiEnable, title: "ÊòéÁü≥„ÉÅ„É£„É¨„É≥„Ç∏") {
                    unitExView5body2image(
                        title: "ÊòéÁü≥„ÉÅ„É£„É¨„É≥„Ç∏",
                        textBody1: "„ÉªÂëäÁü•„Ç≤„Éº„É†Êï∞„ÅÆÊåØÂàÜ„Åë„ÇíË®àÁÆóË¶ÅÁ¥†„Å´Âä†„Åà„Åæ„Åô",
                    )
                }
                // ÁµÇ‰∫ÜÁîªÈù¢
                unitToggleWithQuestion(enable: self.$screenEnable, title: "„Éú„Éº„Éä„Çπ,ATÁµÇ‰∫ÜÁîªÈù¢") {
                    unitExView5body2image(
                        title: "ÁµÇ‰∫ÜÁîªÈù¢",
                        textBody1: "„ÉªÁµÇ‰∫ÜÁîªÈù¢„ÅÆÊåØ„ÇäÂàÜ„Åë„ÇíË®àÁÆóË¶ÅÁ¥†„Å´Âä†„Åà„Åæ„Åô"
                    )
                }
                // ATÂæå„ÅÆÈ´òÁ¢∫„Çπ„Çø„Éº„Éà
                unitToggleWithQuestion(enable: self.$startModeEnable, title: "ATÂæå„ÅÆÈ´òÁ¢∫„Çπ„Çø„Éº„Éà")
                // Áéâ„Å°„ÇÉ„Çì„Éà„É≠„Éï„Ç£„Éº
                DisclosureGroup("Áéâ„Å°„ÇÉ„Çì„Éà„É≠„Éï„Ç£„Éº") {
                    unitToggleWithQuestion(enable: self.$over2Check, title: "ÈäÖ")
                    unitToggleWithQuestion(enable: self.$over3Check, title: "ÈäÄ")
                    unitToggleWithQuestion(enable: self.$over4Check, title: "Èáë")
                    unitToggleWithQuestion(enable: self.$over5Check, title: "„Çº„Éñ„É©ÊüÑ")
                    unitToggleWithQuestion(enable: self.$over6Check, title: "Ëôπ")
                }
            }
            
            // //// STEP3
            bayesSubStep3Section(viewModel: viewModel) {
                self.resultGuess = bayesRatio()
            }
        }
        // //// „Éê„ÉÉ„Ç∏„ÅÆ„É™„Çª„ÉÉ„Éà
        .resetBadgeOnAppear($common.azurLaneMenuBayesBadge)
        // //// firebase„É≠„Ç∞
        .onAppear {
            let screenClass = String(describing: Self.self)
            logEventFirebaseScreen(
                screenName: azurLane.machineName,
                screenClass: screenClass
            )
        }
        .navigationTitle("Ë®≠ÂÆöÊúüÂæÖÂÄ§")
        .navigationBarTitleDisplayMode(.inline)
        // //// ÁîªÈù¢Ë°®Á§∫ÊôÇ„ÅÆÂá¶ÁêÜ
        .bayesOnAppear(
            bayes: bayes,
            viewModel: viewModel,
            settingList: self.settingList,
            guessCustom1: self.$guessCustom1,
            guessCustom2: self.$guessCustom2,
            guessCustom3: self.$guessCustom3
        )
        // //// Ë®àÁÆóÁµêÊûú„Ç∑„Éº„Éà„ÅÆË°®Á§∫Áô∫ÁÅ´Âá¶ÁêÜ
        .onChange(of: viewModel.isAdDismissed) {
            if viewModel.isAdDismissed {
                self.isShowResult = true
            }
        }
        .sheet(isPresented: self.$isShowResult) {
            bayesResultView(
                settingList: self.settingList,
                resultGuess: self.resultGuess,
                payoutList: self.payoutList,
            )
                .presentationDetents([.large])
        }
        // //// „ÉÑ„Éº„É´„Éê„Éº
        .toolbar {
            ToolbarItem(placement: .automatic) {
                unitToolbarButtonCustomSheet(
                    settingList: self.settingList,
                    bayes: bayes,
                    guessCustom1: self.$guessCustom1,
                    guessCustom2: self.$guessCustom2,
                    guessCustom3: self.$guessCustom3,
                    selectedBeforeGuessPattern: self.$selectedBeforeGuessPattern,
                )
            }
            ToolbarItem(placement: .automatic) {
                bayesInfoButtonBayes()
            }
        }
    }
    // //// ‰∫ãÂæåÁ¢∫Áéá„ÅÆÁÆóÂá∫
    private func bayesRatio() -> [Double] {
//        // Âº±„ÉÅ„Çß„É™„Éº
//        var logPostJakuCherry: [Double] = [Double](repeating: 0, count: self.settingList.count)
//        if self.jakuRareEnable {
//            logPostJakuCherry = logPostDenoBino(
//                ratio: azurLane.ratioJakuCherry,
//                Count: azurLane.koyakuCountJakuCherry,
//                bigNumber: azurLane.gameNumberPlay
//            )
//        }
//        // Âº±„Çπ„Ç§„Ç´
//        var logPostJakuSuika: [Double] = [Double](repeating: 0, count: self.settingList.count)
//        if self.jakuRareEnable {
//            logPostJakuSuika = logPostDenoBino(
//                ratio: azurLane.ratioJakuSuika,
//                Count: azurLane.koyakuCountJakuSuika,
//                bigNumber: azurLane.gameNumberPlay
//            )
//        }
        // Â∞èÂΩπÁ¢∫Áéá
        var logPostKoyaku: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.jakuRareEnable {
            logPostKoyaku = logPostDenoMulti(
                countList: [
                    azurLane.koyakuCountCommonBell,
                    azurLane.koyakuCountJakuCherry,
                    azurLane.koyakuCountJakuSuika,
                ], denoList: [
                    azurLane.ratioCommonBell,
                    azurLane.ratioJakuCherry,
                    azurLane.ratioJakuSuika,
                ], bigNumber: azurLane.gameNumberPlay
            )
        }
        // ÁôΩÔºóÁ¢∫Áéá
        var logPostBonusWhite: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.firstHitEnable {
            logPostBonusWhite = logPostDenoBino(
                ratio: azurLane.ratioBonusWhite,
                Count: azurLane.bonusCountWhite,
                bigNumber: azurLane.gameNormalNumberPlay
            )
        }
        // ÁôΩÔºóÁ¢∫Áéá
        var logPostBonusBlue: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.firstHitEnable {
            logPostBonusBlue = logPostDenoBino(
                ratio: azurLane.ratioBonusBlue,
                Count: azurLane.bonusCountBlue,
                bigNumber: azurLane.gameNormalNumberPlay
            )
        }
//        // „Éú„Éº„Éä„ÇπÂàùÂΩì„Çä
//        var logPostBonus: [Double] = [Double](repeating: 0, count: self.settingList.count)
//        if self.firstHitEnable {
//            logPostBonus = logPostDenoBino(
//                ratio: azurLane.ratioBonus,
//                Count: azurLane.bonusCount,
//                bigNumber: azurLane.gameNormalNumberPlay
//            )
//        }
        // ATÂàùÂΩì„Çä
        var logPostAt: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.firstHitEnable {
            logPostAt = logPostDenoBino(
                ratio: azurLane.ratioAt,
                Count: azurLane.atCount,
                bigNumber: azurLane.gameNormalNumberPlay
            )
        }
        // ÊòéÁü≥„ÉÅ„É£„É¨„É≥„Ç∏
        var logPostAkashi: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.akashiEnable {
            logPostAkashi = logPostPercentMulti(
                countList: [
                    azurLane.akashiCountKisu,
                    azurLane.akashiCountGusu,
                    azurLane.akashiCountLast,
                ], ratioList: [
                    azurLane.ratioAkashiKisu,
                    azurLane.ratioAkashiGusu,
                    azurLane.ratioAkashiLast,
                ], bigNumber: azurLane.akashiCountSum
            )
        }
        // ÁµÇ‰∫ÜÁîªÈù¢
        var logPostScreen: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.screenEnable {
//            // Ôºí‰ª•‰∏ä
//            if azurLane.screenCountOver2 > 0 {
//                logPostScreen[0] = -Double.infinity
//            }
//            // 4‰ª•‰∏ä
//            if azurLane.screenCountOver4 > 0 {
//                logPostScreen[0] = -Double.infinity
//                logPostScreen[1] = -Double.infinity
//                logPostScreen[2] = -Double.infinity
//            }
//            // 6‰ª•‰∏ä
//            if azurLane.screenCountOver6 > 0 {
//                logPostScreen[0] = -Double.infinity
//                logPostScreen[1] = -Double.infinity
//                logPostScreen[2] = -Double.infinity
//                logPostScreen[3] = -Double.infinity
//                logPostScreen[4] = -Double.infinity
//            }
            logPostScreen = logPostPercentMulti(
                countList: [
                    azurLane.screenCountDefault,
                    azurLane.screenCountDefaultGusu,
                    azurLane.screenCountHighJaku,
                    azurLane.screenCountHighKyo,
                    azurLane.screenCountOver2,
                    azurLane.screenCountOver4,
                    azurLane.screenCountOver6,
                ], ratioList: [
                    azurLane.ratioScreenDefaultKisu,
                    azurLane.ratioScreenDefaultGusu,
                    azurLane.ratioScreenHighJaku,
                    azurLane.ratioScreenHighKyo,
                    azurLane.ratioScreenOver2,
                    azurLane.ratioScreenOver4,
                    azurLane.ratioScreenOver6,
                ], bigNumber: azurLane.screenCountSetteiSum
            )
        }
        // ATÂæå„ÅÆÈ´òÁ¢∫„Çπ„Çø„Éº„Éà
        var logPostStartMode: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.startModeEnable {
            logPostStartMode = logPostPercentMulti(
                countList: [
                    azurLane.startModeCountHigh,
                    azurLane.startModeCountChoHigh,
                ],
                ratioList: [
                    azurLane.ratioStartHigh,
                    azurLane.ratioStartChoHigh,
                ],
                bigNumber: azurLane.startModeCountSum
            )
        }
        // Âä†Ë≥Ä„Éê„Éà„É´
        var logPostKaga: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.kagaEnable {
            logPostKaga = logPostPercentMulti(
                countList: [
                    azurLane.kagaCountDefault,
                    azurLane.kagaCountDefaultGusu,
                    azurLane.kagaCountKisu,
                    azurLane.kagaCountGusu,
                    azurLane.kagaCount46sisa,
                    azurLane.kagaCount56sisa,
                ], ratioList: [
                    azurLane.ratioKagaDefaultKisu,
                    azurLane.ratioKagaDefaultGusu,
                    azurLane.ratioKagaKisu,
                    azurLane.ratioKagaGusu,
                    azurLane.ratioKaga46Sisa,
                    azurLane.ratioKaga56Sisa,
                ], bigNumber: azurLane.kagaCountSum
            )
        }
        // „Éà„É≠„Éï„Ç£„Éº
        var logPostTrophy: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.over2Check {
            logPostTrophy[0] = -Double.infinity
        }
        if self.over3Check {
            logPostTrophy[0] = -Double.infinity
            logPostTrophy[1] = -Double.infinity
        }
        if self.over4Check {
            logPostTrophy[0] = -Double.infinity
            logPostTrophy[1] = -Double.infinity
            logPostTrophy[2] = -Double.infinity
        }
        if self.over5Check {
            logPostTrophy[0] = -Double.infinity
            logPostTrophy[1] = -Double.infinity
            logPostTrophy[2] = -Double.infinity
            logPostTrophy[3] = -Double.infinity
        }
        if self.over6Check {
            logPostTrophy[0] = -Double.infinity
            logPostTrophy[1] = -Double.infinity
            logPostTrophy[2] = -Double.infinity
            logPostTrophy[3] = -Double.infinity
            logPostTrophy[4] = -Double.infinity
        }
        
        // ‰∫ãÂâçÁ¢∫Áéá„ÅÆÂØæÊï∞Â∞§Â∫¶
        let logPostBefore = logPostBeforeFunc(
            guess: selectedGuess(
                pattern: self.selectedBeforeGuessPattern
            )
        )
        
        // Âà§Âà•Ë¶ÅÁ¥†„ÅÆÂ∞§Â∫¶ÂêàÁÆó
        let logPostSum: [Double] = arraySumDouble([
//            logPostJakuCherry,
//            logPostJakuSuika,
            logPostKoyaku,
            logPostBonusWhite,
            logPostBonusBlue,
//            logPostBonus,
            logPostAt,
            logPostAkashi,
            logPostScreen,
            logPostStartMode,
            logPostTrophy,
            logPostBefore,
            logPostKaga
        ])
        
        // ‰∫ãÂæåÁ¢∫Áéá„ÅÆÁÆóÂá∫
        let afterGuess = bayesResultRatioFunc(logPost: logPostSum)
        
        return afterGuess
    }
    
    // //// ÈÅ∏Êäû„Åó„ÅüË®≠ÂÆöÈÖçÂàÜÈÖçÂàó„ÇíËøî„Åô
    func selectedGuess(pattern: String) -> [Int] {
        switch pattern {
        case bayes.guessPatternList[0]: return bayes.guess6Default
        case bayes.guessPatternList[1]: return bayes.guess6JugDefault
        case bayes.guessPatternList[2]: return bayes.guess6Evenly
        case bayes.guessPatternList[3]: return bayes.guess6Half
        case bayes.guessPatternList[4]: return bayes.guess6Quater
        case bayes.guessPatternList[5]: return self.guessCustom1
        case bayes.guessPatternList[6]: return self.guessCustom2
        case bayes.guessPatternList[7]: return self.guessCustom3
        default: return bayes.guess6Default
        }
    }
}

#Preview {
    azurLaneViewBayes(
        azurLane: AzurLane(),
        bayes: Bayes(),
        viewModel: InterstitialViewModel(),
    )
    .environmentObject(commonVar())
}

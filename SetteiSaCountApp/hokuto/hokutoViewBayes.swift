//
//  hokutoViewBayes.swift
//  SetteiSaCountApp
//
//  Created by Ê®™Áî∞Âæπ on 2025/08/19.
//

import SwiftUI

struct hokutoViewBayes: View {
    @ObservedObject var ver380: Ver380
    @ObservedObject var hokuto: Hokuto
    
    // Ê©üÁ®Æ„Åî„Å®„Å´Ë¶ãÁõ¥„Åó
    let settingList: [Int] = [1,2,4,5,6]   // „Åù„ÅÆÊ©üÁ®Æ„ÅÆË®≠ÂÆöÊÆµÈöé
    let payoutList: [Double] = [98.0, 98.9, 105.7, 110.0, 113.0]
    @State var normalBellEnable: Bool = true
    @State var normalRareEnable: Bool = true
    @State var firstHitEnable: Bool = true
    @State var bbBellEnable: Bool = true
    @State var voiceEnable: Bool = true
    
    // ÂÖ®Ê©üÁ®ÆÂÖ±ÈÄö
    @ObservedObject var bayes: Bayes   // BayesClass„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ
    @ObservedObject var viewModel: InterstitialViewModel   // Â∫ÉÂëä„ÇØ„É©„Çπ„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ
    @State var guessCustom1: [Int] = []   // „Ç´„Çπ„Çø„É†ÈÖçÂàÜ1Áî®„ÅÆÂÖ•„ÇåÁâ©
    @State var guessCustom2: [Int] = []   // „Ç´„Çπ„Çø„É†ÈÖçÂàÜ2Áî®„ÅÆÂÖ•„ÇåÁâ©
    @State var guessCustom3: [Int] = []   // „Ç´„Çπ„Çø„É†ÈÖçÂàÜ3Áî®„ÅÆÂÖ•„ÇåÁâ©
    @State var resultGuess: [Double] = []   // Ë®àÁÆóÁµêÊûú„ÅÆÂÖ•„ÇåÁâ©
    @State var isShowResult: Bool = false   // ÁµêÊûú„Ç∑„Éº„Éà„ÅÆË°®Á§∫„Éà„É™„Ç¨„Éº
    @State var over2Check: Bool = false   // 2‰ª•‰∏äÊøÉÂéö
    @State var over3Check: Bool = false   // 3‰ª•‰∏äÊøÉÂéö
    @State var over4Check: Bool = false   // 4‰ª•‰∏äÊøÉÂéö
    @State var over5Check: Bool = false   // 5‰ª•‰∏äÊøÉÂéö
    @State var over6Check: Bool = false   // 6‰ª•‰∏äÊøÉÂéö
    @State var selectedBeforeGuessPattern: String = "„Éá„Éï„Ç©„É´„Éà"
    
    var body: some View {
        List {
            // //// STEP1
            bayesSubStep1Section(
                bayes: bayes,
                settingList: self.settingList,
                guessCustom1: self.$guessCustom1,
                guessCustom2: self.$guessCustom2,
                guessCustom3: self.$guessCustom3,
                selectedBeforeGuessPattern: self.$selectedBeforeGuessPattern,
            )
            
            // //// STEP2
            bayesSubStep2Section {
                // Âπ≥Ë°å„Éô„É´Á¢∫Áéá
                unitToggleWithQuestion(enable: self.$normalBellEnable, title: "ÈÄöÂ∏∏ÊôÇ„ÅÆÂπ≥Ë°å„Éô„É´Á¢∫Áéá") {
                    unitExView5body2image(
                        title: "ÈÄöÂ∏∏ÊôÇ„ÅÆÂπ≥Ë°å„Éô„É´Á¢∫Áéá",
                        textBody1: "„ÉªÈÄöÂ∏∏ÊôÇ„ÅÆ‰∏≠ÊÆµÂπ≥Ë°å„Éô„É´„ÅÆÂá∫ÁèæÁ¢∫Áéá„ÇíË®àÁÆóË¶ÅÁ¥†„Å´Âä†„Åà„Åæ„Åô",
                    )
                }
                // „É¨„Ç¢ÂΩπÁ¢∫Áéá
                unitToggleWithQuestion(enable: self.$normalRareEnable, title: "„É¨„Ç¢ÂΩπÁ¢∫Áéá") {
                    unitExView5body2image(
                        title: "„É¨„Ç¢ÂΩπÁ¢∫Áéá",
                        textBody1: "„ÉªüçâÂêàÁÆóÁ¢∫Áéá„Å®‰∏≠ÊÆµüçíÁ¢∫Áéá„ÇíË®àÁÆóË¶ÅÁ¥†„Å´Âä†„Åà„Åæ„Åô"
                    )
                }
                // „Éê„Éà„É´„Éú„Éº„Éä„ÇπÂàùÂΩì„ÇäÁ¢∫Áéá
                unitToggleWithQuestion(enable: self.$firstHitEnable, title: "„Éê„Éà„É´„Éú„Éº„Éä„ÇπÂàùÂΩì„ÇäÁ¢∫Áéá")
                // Âπ≥Ë°å„Éô„É´Á¢∫Áéá
                unitToggleWithQuestion(enable: self.$bbBellEnable, title: "BB‰∏≠„ÅÆÂπ≥Ë°å„Éô„É´Á¢∫Áéá") {
                    unitExView5body2image(
                        title: "BB‰∏≠„ÅÆÂπ≥Ë°å„Éô„É´Á¢∫Áéá",
                        textBody1: "„Éª„Éê„Éà„É´„Éú„Éº„Éä„Çπ‰∏≠„ÅÆ‰∏≠ÊÆµÂπ≥Ë°å„Éô„É´„ÅÆÂá∫ÁèæÁ¢∫Áéá„ÇíË®àÁÆóË¶ÅÁ¥†„Å´Âä†„Åà„Åæ„Åô",
                    )
                }
                // BBÂæå„ÅÆ„Éú„Ç§„Çπ
                unitToggleWithQuestion(enable: self.$voiceEnable, title: "„Éê„Éà„É´„Éú„Éº„Éä„ÇπÂæå„ÅÆ„Éú„Ç§„Çπ")
                // „Çµ„Éü„Éº„Éà„É≠„Éï„Ç£„Éº
                DisclosureGroup("„Çµ„Éü„Éº„Éà„É≠„Éï„Ç£„Éº") {
                    unitToggleWithQuestion(enable: self.$over4Check, title: "Èáë")
                    unitToggleWithQuestion(enable: self.$over5Check, title: "„Ç≠„É™„É≥ÊüÑ")
                    unitToggleWithQuestion(enable: self.$over6Check, title: "Ëôπ")
                }
            }
            
            // //// STEP3
            bayesSubStep3Section(viewModel: viewModel) {
                self.resultGuess = bayesRatio()
            }
        }
        // //// „Éê„ÉÉ„Ç∏„ÅÆ„É™„Çª„ÉÉ„Éà
        .resetBadgeOnAppear($ver380.hokutoMenuBayesBadge)
        // //// firebase„É≠„Ç∞
        .onAppear {
            let screenClass = String(describing: Self.self)
            logEventFirebaseScreen(
                screenName: "„Çπ„Éû„Çπ„É≠ÂåóÊñó„ÅÆÊã≥",
                screenClass: screenClass
            )
        }
        .navigationTitle("Ë®≠ÂÆöÊúüÂæÖÂÄ§")
        .navigationBarTitleDisplayMode(.inline)
        // //// ÁîªÈù¢Ë°®Á§∫ÊôÇ„ÅÆÂá¶ÁêÜ
        .bayesOnAppear(
            bayes: bayes,
            viewModel: viewModel,
            settingList: self.settingList,
            guessCustom1: self.$guessCustom1,
            guessCustom2: self.$guessCustom2,
            guessCustom3: self.$guessCustom3
        )
        // //// Ë®àÁÆóÁµêÊûú„Ç∑„Éº„Éà„ÅÆË°®Á§∫Áô∫ÁÅ´Âá¶ÁêÜ
        .onChange(of: viewModel.isAdDismissed) {
            if viewModel.isAdDismissed {
                self.isShowResult = true
            }
        }
        .sheet(isPresented: self.$isShowResult) {
            bayesResultView(
                settingList: self.settingList,
                resultGuess: self.resultGuess,
                payoutList: self.payoutList,
            )
                .presentationDetents([.large])
        }
        // //// „ÉÑ„Éº„É´„Éê„Éº
        .toolbar {
            ToolbarItem(placement: .automatic) {
                unitToolbarButtonCustomSheet(
                    settingList: self.settingList,
                    bayes: bayes,
                    guessCustom1: self.$guessCustom1,
                    guessCustom2: self.$guessCustom2,
                    guessCustom3: self.$guessCustom3,
                    selectedBeforeGuessPattern: self.$selectedBeforeGuessPattern,
                )
            }
            ToolbarItem(placement: .automatic) {
                bayesInfoButtonBayes()
            }
        }
    }
    // //// ‰∫ãÂæåÁ¢∫Áéá„ÅÆÁÆóÂá∫
    private func bayesRatio() -> [Double] {
        // ÈÄöÂ∏∏ÊôÇ„Éô„É´
        var logPostNormalBell: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.normalBellEnable {
            logPostNormalBell = logPostDenoBino(
                ratio: [170,152.5,135,117.5,100],
                Count: hokuto.normalBellHorizontalCount,
                bigNumber: hokuto.normalPlayGame
            )
        }
        // „É¨„Ç¢ÂΩπÁ¢∫Áéá
        // „Çπ„Ç§„Ç´
        var logPostSuika: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.normalRareEnable {
            logPostSuika = logPostDenoBino(
                ratio: [86.1,85.7,82.6,78.3,76.1],
                Count: hokuto.rareCountSuikaSum,
                bigNumber: hokuto.totalGame
            )
        }
        // ‰∏≠ÊÆµ„ÉÅ„Çß„É™„Éº
        var logPostCherry: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.normalRareEnable {
            logPostCherry = logPostDenoBino(
                ratio: [210.1,204.8,199.8,195,190.5],
                Count: hokuto.rareCount2Cherry,
                bigNumber: hokuto.totalGame
            )
        }
        // „Éê„Éà„É´„Éú„Éº„Éä„ÇπÂàùÂΩì„Çä
        var logPostFirstHit: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.firstHitEnable {
            logPostFirstHit = logPostDenoBino(
                ratio: [383.4,370.5,297.8,258.7,235.1],
                Count: hokuto.bbHitCount,
                bigNumber: hokuto.bbGameSum
            )
        }
        // BB‰∏≠„ÅÆ‰∏≠ÊÆµ„Éô„É´
        var logPostBbBell: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.bbBellEnable {
            logPostBbBell = logPostDenoBino(
                ratio: [400,357.5,315,272.5,230],
                Count: hokuto.bbBellHorizontalCount,
                bigNumber: hokuto.bbPlayGame
            )
        }
        // „Éú„Ç§„Çπ
        var logPostVoice: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.voiceEnable {
            logPostVoice = logPostPercentMulti(
                countList: [
                    hokuto.voiceDefaultCount,
                    hokuto.voiceShinCount,
                    hokuto.voiceSauzaCount,
                    hokuto.voiceJagiCount,
                    hokuto.voiceAmibaCount,
                ],
                ratioList: [
                    [84.7,83.3,74,73,71],
                    [5.7,6.1,6.3,6.7,7.2],
                    [5.0,5.3,6.3,6.7,7.2],
                    [3.4,3.8,6.3,6.7,7.2],
                    [1.2,1.5,6.3,6.7,7.2],
                ],
                bigNumber: hokuto.voiceCountSum
            )
            // „Ç±„É≥
            if hokuto.voiceKenCount > 0 {
                logPostVoice[0] = -Double.infinity
                logPostVoice[1] = -Double.infinity
            }
            // „É¶„É™„Ç¢
            if hokuto.voiceYuriaCount > 0 {
                logPostVoice[0] = -Double.infinity
                logPostVoice[1] = -Double.infinity
                logPostVoice[2] = -Double.infinity
            }
        }
        
        // „Éà„É≠„Éï„Ç£„Éº
        var logPostTrophy: [Double] = [Double](repeating: 0, count: self.settingList.count)
        if self.over4Check {
            logPostTrophy[0] = -Double.infinity
            logPostTrophy[1] = -Double.infinity
        }
        if self.over5Check {
            logPostTrophy[0] = -Double.infinity
            logPostTrophy[1] = -Double.infinity
            logPostTrophy[2] = -Double.infinity
        }
        if self.over6Check {
            logPostTrophy[0] = -Double.infinity
            logPostTrophy[1] = -Double.infinity
            logPostTrophy[2] = -Double.infinity
            logPostTrophy[3] = -Double.infinity
        }
        
        // ‰∫ãÂâçÁ¢∫Áéá„ÅÆÂØæÊï∞Â∞§Â∫¶
        let logPostBefore = logPostBeforeFunc(
            guess: selectedGuess(
                pattern: self.selectedBeforeGuessPattern
            )
        )
        
        // Âà§Âà•Ë¶ÅÁ¥†„ÅÆÂ∞§Â∫¶ÂêàÁÆó
        let logPostSum: [Double] = arraySumDouble([
            logPostNormalBell,
            logPostSuika,
            logPostCherry,
            logPostFirstHit,
            logPostBbBell,
            logPostVoice,
            logPostTrophy,
            logPostBefore,
        ])
        
        // ‰∫ãÂæåÁ¢∫Áéá„ÅÆÁÆóÂá∫
        let afterGuess = bayesResultRatioFunc(logPost: logPostSum)
        
        return afterGuess
    }
    
    // //// ÈÅ∏Êäû„Åó„ÅüË®≠ÂÆöÈÖçÂàÜÈÖçÂàó„ÇíËøî„Åô
    func selectedGuess(pattern: String) -> [Int] {
        switch pattern {
        case bayes.guessPatternList[0]: return bayes.guess5Default
        case bayes.guessPatternList[1]: return bayes.guess5JugDefault
        case bayes.guessPatternList[2]: return bayes.guess5Evenly
        case bayes.guessPatternList[3]: return bayes.guess5Half
        case bayes.guessPatternList[4]: return bayes.guess5Quater
        case bayes.guessPatternList[5]: return self.guessCustom1
        case bayes.guessPatternList[6]: return self.guessCustom2
        case bayes.guessPatternList[7]: return self.guessCustom3
        default: return bayes.guess5Default
        }
    }
}

#Preview {
    hokutoViewBayes(
        ver380: Ver380(),
        hokuto: Hokuto(),
        bayes: Bayes(),
        viewModel: InterstitialViewModel(),
    )
}
